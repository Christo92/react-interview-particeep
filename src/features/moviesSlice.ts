import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import { movies$ } from "../api/movies";

export interface MoviesItem {
  id: string;
  title: string;
  category: string;
  likes: number;
  dislikes: number;
}

interface UserActions {
  liked?: boolean,
  disliked?: boolean
}

export interface MoviesState {
  list: MoviesItem[];
  loading: boolean;
  userActions: { [key: string]: UserActions };
  filterCategory: string;
}



const initialState: MoviesState = {
  list: [],
  loading: false,
  userActions: {},
  filterCategory: "All",
};

// Async thunk to fetch movies data
export const getMovies = createAsyncThunk("movies/getMovies", async () => {
  const res = await movies$.then((data) => data);
  return res;
});

// Redux slice definition for movies
export const moviesSlice = createSlice({
  name: "movies",
  initialState,
  reducers: {
    // Reducer to delete a movie from the state
    deleteMovie: (state, action) => {
      const movieId = action.payload
      const updateList = state.list.filter((movie) => movie.id !== movieId);
      state.list = updateList;

      // Reset the user actions related to the deleted movie
      delete state.userActions[movieId];
    },
    // Reducer to set a movie as liked
    setLikeMovie: (state, action) => {
      const movieId = action.payload;
      const movie = state.list.find((movie) => movie.id === movieId);
      if (!movie) return;

      if (!state.userActions[movieId]) {
        state.userActions[movieId] = { liked: false, disliked: false };
      }

      if (!state.userActions[movieId].liked) {
        movie.likes++;
        state.userActions[movieId].liked = true;

        if (state.userActions[movieId].disliked) {
          movie.dislikes--;
          state.userActions[movieId].disliked = false;
        }
      }
    },
    // Reducer to set a movie as disliked
    setDislikeMovie: (state, action) => {
      const movieId = action.payload;
      const movie = state.list.find((movie) => movie.id === movieId);
      if (!movie) return;

      if (!state.userActions[movieId]) {
        state.userActions[movieId] = { liked: false, disliked: false };
      }

      if (!state.userActions[movieId].disliked) {
        movie.dislikes++;
        state.userActions[movieId].disliked = true;

        if (state.userActions[movieId].liked) {
          movie.likes--;
          state.userActions[movieId].liked = false;
        }
      }
    },
    // Reducer to set the category filter
    setFilterCategory: (state, action) => {
      state.filterCategory = action.payload;
    },
  },
  extraReducers: (builder) => {
    // Handling async thunk lifecycle actions
    builder.addCase(getMovies.pending, (state) => {
      state.loading = true;
    });
    builder.addCase(getMovies.fulfilled, (state, { payload }) => {
      state.loading = false;
      state.list = payload;
    });
    builder.addCase(getMovies.rejected, (state) => {
      state.loading = false;
    });
  },
});

// Exporting action creators generated for each case reducer function
export const { deleteMovie, setLikeMovie, setDislikeMovie, setFilterCategory } =
  moviesSlice.actions;

// Exporting the movies reducer function generated by createSlice
export default moviesSlice.reducer;
